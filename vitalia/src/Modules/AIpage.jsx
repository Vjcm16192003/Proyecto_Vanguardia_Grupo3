import React, { useEffect, useState, useContext } from 'react';
import * as tf from '@tensorflow/tfjs';
import './AIpage.css';
import { useNavigate } from 'react-router-dom';
import { AuthContext } from '../AuthContext';

function AIPage() {
  const [model, setModel] = useState(null);
  const { userId, logout } = useContext(AuthContext);
  const navigate = useNavigate();
  const [X, setX] = useState(0);
  const [Y, setY] = useState(0);
  const [resultMessage, setResultMessage] = useState("");

  const [predict, setPredict] = useState({
    age: 0,
    weight: 0,
    height: 0,
    sex: 0,
    physicalActivity: 0
  });

  const x1 = [
    [93, 56, 154, 1, 3],
    [51, 64, 171, 1, 1],
    [26, 70, 177, 0, 2],
    [83, 60, 164, 1, 3],
    [51, 62, 166, 0, 2],
    [93, 65, 169, 0, 1],
    [90, 66, 170, 1, 3],
    [54, 63, 167, 0, 3],
    [65, 54, 148, 0, 1],
    [90, 80, 190, 0, 3],
    [81, 68, 173, 0, 1],
    [92, 52, 146, 1, 3],
    [83, 69, 174, 1, 2],
    [43, 67, 172, 0, 3],
    [86, 58, 163, 1, 2],
    [63, 48, 142, 0, 3],
    [33, 90, 199, 0, 1],
    [25, 48, 142, 0, 1],
    [46, 48, 142, 0, 3],
    [72, 78, 186, 0, 3],
    [76, 78, 186, 0, 3],
    [84, 61, 162, 0, 1],
    [51, 71, 178, 1, 3],
    [77, 52, 153, 1, 2],
    [65, 70, 177, 1, 1],
    [23, 77, 185, 0, 3],
    [25, 69, 174, 1, 2],
    [71, 46, 140, 0, 1],
    [30, 82, 188, 0, 3],
    [84, 54, 148, 1, 2],
    [74, 92, 200, 0, 2],
    [55, 88, 193, 0, 2],
    [98, 56, 154, 1, 1],
    [29, 74, 180, 1, 2],
    [28, 55, 149, 0, 2],
    [20, 49, 141, 0, 1],
    [58, 72, 175, 1, 3],
    [34, 80, 190, 1, 1],
    [73, 50, 150, 0, 2],
    [53, 52, 152, 0, 3],
    [64, 57, 161, 1, 2],
    [31, 77, 185, 1, 2],
    [37, 75, 183, 1, 2],
    [90, 64, 171, 1, 2],
    [83, 89, 198, 1, 3],
    [52, 52, 146, 0, 3],
    [38, 90, 199, 0, 3],
    [86, 84, 189, 1, 2],
    [35, 51, 145, 1, 3],
    [56, 58, 157, 1, 2],
    [18, 63, 161, 1, 2],
    [35, 62, 159, 1, 3],
    [23, 69, 174, 1, 1],
    [94, 88, 197, 1, 3],
    [21, 74, 180, 1, 1],
    [51, 82, 188, 0, 1],
    [84, 58, 157, 1, 2],
    [95, 76, 184, 0, 2],
    [82, 63, 161, 0, 1],
    [53, 70, 175, 1, 2],
    [48, 76, 184, 1, 3],
    [85, 58, 157, 1, 1],
    [61, 66, 170, 1, 2],
    [66, 60, 152, 0, 1],
    [58, 49, 141, 0, 1],
    [32, 61, 162, 1, 3],
    [73, 53, 155, 0, 1],
    [61, 87, 196, 0, 1],
    [44, 56, 154, 0, 3],
    [98, 84, 189, 1, 2],
    [61, 72, 181, 0, 3],
    [69, 78, 186, 1, 2],
    [73, 69, 174, 1, 1],
    [99, 61, 165, 0, 3],
    [85, 88, 197, 1, 3],
    [77, 86, 192, 1, 2],
    [74, 87, 193, 1, 3],
    [32, 53, 147, 1, 1],
    [92, 55, 150, 1, 2],
    [94, 53, 147, 0, 2],
    [74, 55, 150, 1, 2],
    [82, 50, 144, 1, 3],
    [95, 88, 197, 1, 1],
    [23, 50, 144, 1, 2],
    [67, 82, 188, 0, 2],
    [86, 76, 179, 1, 1],
    [60, 52, 146, 0, 3],
    [27, 88, 197, 1, 1],
    [52, 56, 155, 0, 3],
    [62, 74, 182, 1, 3],
    [38, 51, 145, 0, 1],
    [68, 77, 185, 1, 3],
    [20, 76, 178, 0, 2],
    [90, 59, 158, 1, 2],
    [74, 64, 163, 1, 3],
    [52, 73, 181, 1, 2],
    [24, 79, 188, 1, 3],
    [42, 57, 156, 0, 2],
    [33, 82, 180, 0, 1],
    [93, 76, 175, 1, 1],
    [84, 72, 192, 0, 3],
    [83, 92, 140, 1, 3],
    [40, 56, 144, 1, 1],
    [64, 60, 184, 0, 3],
    [22, 86, 193, 1, 1],
    [79, 92, 196, 0, 3],
    [21, 94, 151, 0, 2],
    [28, 58, 151, 0, 3],
    [74, 58, 180, 0, 1],
    [86, 82, 140, 0, 3],
    [66, 56, 163, 1, 1],
    [86, 66, 146, 1, 2],
    [34, 52, 196, 0, 1],
    [23, 94, 186, 1, 3],
    [28, 88, 197, 1, 3],
    [42, 96, 184, 0, 1],
    [29, 86, 149, 1, 2],
    [88, 62, 177, 0, 3],
    [55, 78, 141, 0, 2],
    [58, 53, 194, 1, 1],
    [48, 90, 197, 0, 3],
    [79, 96, 171, 0, 3],
    [75, 76, 196, 0, 3],
    [74, 94, 192, 0, 3],
    [45, 92, 172, 1, 3],
    [74, 78, 185, 0, 3],
    [87, 85, 154, 1, 2],
    [92, 95, 195, 1, 1],
    [28, 54, 145, 0, 2],
    [27, 93, 180, 1, 2],
    [25, 51, 197, 0, 1],
    [18, 82, 198, 0, 2],
    [69, 96, 180, 0, 1],
    [51, 97, 141, 0, 3],
    [57, 82, 182, 1, 2],
    [36, 51, 189, 1, 3],
    [50, 84, 182, 0, 1],
    [56, 89, 176, 1, 1],
    [24, 84, 185, 0, 1],
    [44, 80, 181, 1, 2],
    [57, 85, 160, 0, 2],
    [43, 83, 157, 1, 1],
    [72, 64, 175, 0, 2],
    [71, 63, 148, 1, 1],
    [17, 72, 155, 1, 3],
    [29, 61, 166, 1, 2],
    [27, 65, 163, 1, 2],
    [54, 68, 167, 1, 3],
    [23, 66, 145, 0, 2],
    [98, 67, 200, 1, 2],
    [97, 51, 163, 0, 3],
    [74, 100, 193, 0, 2],
    [16, 66, 187, 1, 3],
    [25, 94, 146, 1, 2],
    [98, 90, 179, 1, 1],
    [38, 52, 198, 0, 3],
    [58, 80, 188, 1, 1],
    [58, 97, 160, 0, 2],
    [23, 91, 149, 1, 1],
    [42, 64, 188, 1, 3],
    [82, 60, 189, 1, 3],
    [90, 91, 196, 0, 3],
    [25, 91, 169, 1, 2],
    [20, 94, 180, 0, 1],
    [40, 70, 160, 1, 3],
    [90, 82, 140, 1, 2],
    [99, 64, 144, 1, 2],
    [67, 56, 155, 1, 2],
    [53, 52, 143, 0, 3],
    [37, 65, 197, 1, 1],
    [42, 51, 170, 1, 1],
    [74, 94, 183, 0, 2],
    [50, 68, 194, 0, 3],
    [97, 77, 183, 1, 2],
    [16, 90, 140, 0, 1],
    [38, 77, 197, 1, 3],
    [24, 56, 165, 0, 2],
    [93, 94, 167, 0, 3],
    [38, 75, 158, 1, 3],
    [17, 77, 184, 0, 2],
    [34, 73, 181, 0, 2],
    [78, 86, 146, 1, 3],
    [44, 83, 195, 0, 3],
    [20, 52, 145, 1, 1],
    [58, 93, 174, 0, 1],
    [50, 51, 152, 0, 3],
    [26, 75, 186, 0, 3],
    [25, 58, 179, 1, 3],
    [74, 88, 157, 1, 1],
    [42, 81, 196, 1, 1],
    [73, 69, 175, 1, 1],
    [30, 94, 173, 1, 3],
    [76, 72, 190, 0, 3],
    [70, 78, 179, 1, 2],
    [76, 68, 180, 0, 3],
    [26, 87, 171, 1, 3],
    [60, 81, 170, 0, 3],
    [57, 84, 159, 1, 1],
    [61, 81, 169, 1, 3],
    [75, 80, 187, 1, 3],
    [81, 71, 189, 0, 2],
    [26, 71, 177, 1, 3],
    [61, 67, 162, 0, 2],
    [87, 56, 199, 1, 2],
    [57, 100, 141, 1, 1],
    [94, 52, 142, 1, 3],
    [89, 53, 182, 0, 1],
    [53, 84, 192, 1, 1],
    [99, 92, 141, 0, 1],
    [45, 52, 168, 1, 2],
    [95, 78, 143, 1, 3],
    [46, 54, 144, 0, 1],
    [53, 60, 172, 1, 1],
    [69, 77, 182, 1, 2],
    [83, 84, 149, 1, 3],
    [46, 62, 173, 0, 2],
    [87, 75, 165, 0, 1],
    [44, 69, 187, 0, 2],
    [77, 76, 156, 1, 3],
    [52, 86, 187, 1, 1],
    [37, 79, 171, 1, 1],
    [90, 93, 148, 0, 2],
    [37, 76, 184, 0, 1],
    [85, 70, 151, 1, 3],
    [33, 86, 182, 1, 1],
    [79, 58, 162, 1, 1],
    [67, 84, 141, 1, 2],
    [51, 66, 185, 1, 1],
    [92, 51, 161, 0, 3],
    [85, 87, 145, 1, 1],
    [28, 64, 177, 0, 1],
    [56, 54, 167, 1, 3],
    [35, 78, 181, 1, 3],
    [47, 73, 185, 0, 1],
    [68, 83, 181, 0, 1],
    [91, 86, 162, 1, 3],
    [62, 83, 194, 0, 1],
    [66, 66, 199, 1, 1],
    [92, 90, 166, 0, 1],
    [61, 93, 151, 1, 1],
    [28, 69, 144, 1, 3],
    [19, 58, 145, 0, 2],
    [98, 54, 144, 1, 3],
    [62, 52, 163, 1, 3],
    [72, 52, 160, 1, 1],
    [37, 66, 141, 0, 1],
    [26, 64, 173, 1, 1],
    [98, 51, 200, 1, 3],
    [80, 76, 183, 0, 3],
    [47, 100, 160, 1, 2],
    [59, 77, 197, 0, 3],
    [51, 64, 141, 0, 1],
    [68, 94, 174, 1, 1],
    [27, 52, 170, 1, 1],
    [84, 76, 189, 0, 2],
    [18, 72, 198, 1, 2],
    [37, 91, 142, 1, 3],
    [53, 97, 145, 1, 2],
    [33, 53, 158, 1, 3],
    [74, 52, 186, 1, 2],
    [50, 70, 166, 0, 2],
    [33, 88, 178, 0, 1],
    [81, 68, 162, 1, 3],
    [96, 80, 188, 0, 2],
    [20, 72, 190, 1, 1],
    [59, 91, 190, 0, 2],
    [38, 94, 156, 0, 2],
    [24, 94, 179, 1, 3],
    [22, 73, 195, 1, 1],
    [57, 81, 180, 1, 3],
    [88, 93, 176, 0, 2],
    [23, 82, 182, 1, 1],
    [40, 80, 170, 0, 2],
    [23, 84, 148, 0, 1],
    [82, 76, 161, 0, 1],
    [46, 58, 161, 0, 1],
    [45, 67, 159, 1, 2],
    [73, 67, 171, 0, 3],
    [67, 65, 182, 1, 1],
    [23, 73, 163, 1, 2],
    [32, 84, 167, 0, 3],
    [63, 66, 196, 1, 1],
    [88, 73, 181, 0, 3],
    [50, 94, 193, 1, 2],
    [97, 83, 186, 0, 1],
    [82, 92, 192, 0, 2],
    [57, 88, 159, 1, 2],
    [32, 92, 168, 1, 1],
    [28, 73, 187, 0, 3],
    [68, 78, 199, 0, 1],
    [44, 88, 192, 1, 2],
    [18, 100, 182, 1, 2],
    [35, 92, 165, 0, 1],
    [39, 84, 176, 1, 3],
    [80, 75, 149, 1, 2],
    [41, 52, 191, 1, 3],
    [63, 89, 173, 1, 1],
    [26, 77, 184, 1, 3],
    [69, 82, 193, 0, 2],
    [99, 92, 161, 1, 1],
    [60, 61, 181, 0, 1],
    [35, 84, 181, 0, 2],
    [39, 84, 167, 0, 2],
    [31, 78, 190, 1, 2],
    [49, 87, 200, 0, 3],
    [82, 100, 158, 0, 3],
    [96, 70, 192, 1, 2],
    [74, 92, 158, 0, 2],
    [67, 70, 163, 1, 2],
    [42, 75, 182, 1, 1],
    [81, 86, 179, 1, 1],
    [55, 81, 188, 1, 1],
    [95, 90, 165, 0, 2],
    [56, 76, 141, 1, 1],
    [54, 56, 153, 1, 3],
    [63, 65, 145, 0, 3],
    [60, 59, 164, 0, 1],
    [51, 68, 186, 0, 3],
    [67, 94, 152, 0, 3],
    [75, 61, 163, 1, 3],
    [57, 66, 200, 1, 2],
    [36, 54, 152, 1, 3],
    [96, 83, 181, 1, 1],
    [94, 78, 171, 1, 3],
    [69, 72, 166, 0, 1],
    [82, 77, 172, 0, 2],
    [93, 66, 159, 0, 3],
    [43, 71, 164, 0, 1],
    [81, 80, 180, 1, 1],
    [69, 59, 149, 0, 2],
    [79, 57, 147, 0, 2],
    [70, 92, 197, 1, 2],
    [27, 88, 186, 0, 1],
    [62, 92, 197, 1, 2],
    [94, 81, 179, 1, 1],
    [94, 59, 149, 1, 1],
    [93, 74, 175, 1, 1],
    [75, 68, 169, 1, 3],
    [25, 57, 147, 0, 3],
    [45, 63, 157, 1, 1],
    [25, 90, 184, 1, 2],
    [34, 86, 180, 0, 2],
    [87, 52, 143, 0, 2],
    [49, 66, 159, 0, 3],
    [57, 60, 144, 1, 3],
    [32, 93, 194, 1, 3],
    [18, 54, 152, 1, 3],
    [25, 81, 178, 0, 3],
    [16, 78, 171, 0, 2],
    [59, 56, 154, 1, 2],
    [81, 82, 180, 0, 3],
    [50, 60, 144, 0, 3],
    [85, 94, 196, 1, 2],
    [38, 71, 172, 1, 3],
    [88, 90, 193, 0, 2],
    [99, 82, 182, 0, 1],
    [35, 67, 164, 0, 1],
    [39, 87, 190, 0, 3],
    [86, 58, 147, 0, 3],
    [59, 78, 177, 0, 2],
    [81, 54, 143, 1, 2],
    [95, 73, 169, 0, 2],
    [65, 78, 174, 0, 2],
    [17, 53, 142, 0, 2],
    [16, 61, 160, 0, 1],
    [19, 92, 190, 1, 1],
    [47, 88, 186, 0, 2],
    [70, 78, 177, 1, 1],
    [17, 61, 160, 0, 2],
    [79, 58, 147, 1, 1],
    [90, 54, 143, 1, 1],
    [67, 51, 140, 0, 2],
    [77, 81, 178, 1, 3],
    [35, 54, 142, 1, 3],
    [34, 86, 184, 0, 3],
    [58, 75, 173, 0, 2],
    [39, 84, 182, 0, 3],
    [37, 90, 190, 0, 1],
    [24, 77, 176, 1, 2],
    [55, 83, 183, 0, 1],
    [44, 83, 183, 1, 3],
    [80, 93, 193, 0, 3],
    [53, 100, 200, 0, 3],
    [67, 66, 163, 1, 2],
    [35, 92, 193, 0, 1],
    [33, 94, 195, 0, 3],
    [26, 96, 197, 0, 2],
    [33, 62, 149, 0, 1],
    [98, 66, 163, 0, 1],
    [92, 70, 167, 1, 1],
    [84, 57, 144, 0, 3],
    [30, 51, 140, 0, 2],
    [64, 94, 191, 1, 2],
    [64, 69, 159, 1, 2],
    [39, 86, 186, 0, 3],
    [62, 67, 164, 0, 1],
    [27, 75, 172, 1, 2],
    [96, 72, 162, 0, 3],
    [68, 87, 187, 0, 1],
    [10, 35, 133, 0, 2],
    [9, 25, 126, 0, 1],
    [9, 25, 126, 0, 3],
    [5, 14, 90, 0, 2],
    [6, 20, 107, 0, 3],
    [3, 12, 82, 0, 1],
    [6, 20, 107, 0, 3],
    [14, 65, 155, 1, 2],
    [2, 10, 80, 1, 1],
    [5, 18, 97, 1, 1],
    [10, 35, 133, 0, 2],
    [10, 35, 133, 0, 2],
    [15, 70, 160, 1, 2],
    [8, 28, 120, 0, 3],
    [13, 55, 147, 1, 3],
    [12, 50, 145, 1, 2],
    [14, 65, 155, 1, 2],
    [10, 35, 133, 0, 2],
    [4, 16, 95, 0, 1],
    [6, 20, 107, 0, 1],
    [1, 12, 82, 0, 1],
    [2, 14, 85, 0, 2],
    [3, 16, 88, 0, 1],
    [6, 20, 107, 0, 3],
    [9, 25, 126, 0, 3],
    [7, 22, 115, 0, 1],
    [13, 55, 147, 1, 3],
    [14, 65, 155, 1, 3],
    [2, 14, 85, 1, 3],
    [2, 14, 85, 1, 2],
    [14, 65, 155, 1, 3],
    [10, 35, 133, 0, 1],
    [8, 28, 120, 0, 3],
    [15, 70, 160, 1, 1],
    [2, 14, 85, 1, 2],
    [7, 25, 126, 0, 3],
    [8, 28, 120, 0, 1],
    [2, 14, 85, 1, 1],
    [3, 16, 88, 0, 2],
    [3, 16, 88, 0, 2],
    [13, 9, 78, 1, 2]
  ]
  const x2 = [
    1558,
    1555,
    2608,
    1820,
    2187,
    1504,
    1929,
    2436,
    1380,
    2672,
    1640,
    1412,
    1872,
    2653,
    1572,
    1832,
    2383,
    1499,
    1976,
    2747,
    2713,
    1456,
    2432,
    1451,
    1590,
    3135,
    2314,
    1188,
    3194,
    1380,
    2806,
    2821,
    1055,
    2419,
    2089,
    1533,
    2358,
    1990,
    1678,
    2094,
    1705,
    2499,
    2402,
    1712,
    2686,
    2037,
    3383,
    2226,
    1867,
    1742,
    2148,
    2208,
    1803,
    2565,
    1920,
    2098,
    1529,
    2243,
    1485,
    2125,
    2608,
    1178,
    1954,
    1476,
    1308,
    2248,
    1373,
    2159,
    2261,
    2135,
    2683,
    2234,
    1508,
    1999,
    2641,
    2355,
    2674,
    1356,
    1354,
    1536,
    1491,
    1440,
    1778,
    1744,
    2588,
    1553,
    1970,
    2180,
    2203,
    2433,
    1481,
    2467,
    2756,
    1508,
    1954,
    2238,
    2907,
    2081,
    2144,
    1481,
    2606,
    2113,
    1322,
    2483,
    2155,
    3037,
    2766,
    2398,
    1614,
    2201,
    1311,
    1531,
    1899,
    3152,
    3125,
    2289,
    2304,
    2238,
    2162,
    1555,
    3276,
    2836,
    2795,
    3070,
    2780,
    2719,
    1895,
    1865,
    2035,
    2728,
    1947,
    3058,
    2099,
    2768,
    2349,
    2333,
    2083,
    1863,
    2259,
    2407,
    2439,
    1725,
    2145,
    1253,
    2490,
    2082,
    2130,
    2236,
    2259,
    1978,
    1822,
    2862,
    2740,
    2430,
    1650,
    2717,
    1833,
    2617,
    1879,
    2496,
    2098,
    2926,
    2606,
    2365,
    2314,
    1690,
    1381,
    1608,
    1997,
    1845,
    1445,
    2672,
    2848,
    1976,
    2040,
    2851,
    2290,
    2640,
    2396,
    2853,
    2632,
    2116,
    3168,
    1400,
    2083,
    2102,
    3086,
    2439,
    1602,
    2000,
    1515,
    2953,
    2653,
    2158,
    2476,
    2844,
    2728,
    1670,
    2422,
    2480,
    2320,
    2633,
    2149,
    1882,
    1727,
    1352,
    1481,
    1941,
    1582,
    1840,
    1802,
    1462,
    1503,
    2180,
    2072,
    2293,
    1629,
    2552,
    2060,
    1933,
    1818,
    2195,
    2079,
    1835,
    2008,
    1251,
    1906,
    1684,
    1842,
    1435,
    1935,
    1978,
    2721,
    1991,
    1957,
    2179,
    2090,
    1701,
    1787,
    1694,
    2226,
    2166,
    1374,
    1850,
    1205,
    1636,
    1718,
    1926,
    2612,
    2490,
    2959,
    1530,
    1837,
    1546,
    2375,
    2646,
    2507,
    2253,
    2059,
    1793,
    2318,
    2201,
    1953,
    2336,
    1977,
    2808,
    2685,
    3068,
    2015,
    2575,
    2482,
    2019,
    2588,
    1987,
    1640,
    1637,
    1985,
    2387,
    1555,
    2284,
    2985,
    1696,
    2471,
    2694,
    1823,
    2667,
    2219,
    1981,
    3045,
    2032,
    2638,
    2925,
    2140,
    2736,
    1745,
    2330,
    1799,
    2812,
    2621,
    1533,
    1741,
    2795,
    2629,
    2562,
    3248,
    2739,
    1962,
    2399,
    1902,
    1823,
    1702,
    1863,
    2275,
    1445,
    1879,
    2157,
    1589,
    2753,
    2699,
    1894,
    2275,
    1986,
    1593,
    2112,
    1707,
    2241,
    2071,
    1833,
    1638,
    1839,
    1712,
    2550,
    2297,
    2611,
    1565,
    1077,
    1457,
    2080,
    2364,
    1474,
    2736,
    2824,
    1535,
    2444,
    1825,
    3145,
    2139,
    3111,
    2750,
    1660,
    2675,
    2171,
    2457,
    2478,
    2600,
    1770,
    1833,
    3225,
    1863,
    2480,
    1354,
    2051,
    2405,
    2074,
    1843,
    2223,
    2814,
    1656,
    2373,
    1138,
    995,
    1643,
    2384,
    1887,
    3186,
    2403,
    3087,
    2291,
    2465,
    2049,
    2752,
    3013,
    3438,
    1841,
    2350,
    3451,
    3204,
    1672,
    1441,
    1355,
    1830,
    1925,
    2568,
    1871,
    3165,
    1673,
    2372,
    2181,
    2050,
    1762,
    1198,
    1721,
    1058,
    1456,
    747,
    1456,
    2152,
    515,
    721,
    1762,
    1762,
    2270,
    1717,
    2145,
    1838,
    2152,
    1762,
    887,
    1013,
    759,
    1033,
    840,
    1456,
    1721,
    1091,
    2145,
    2395,
    863,
    775,
    2395,
    1364,
    1717,
    1757,
    775,
    1738,
    1194,
    600,
    1085,
    1085,
    615,

  ]

  useEffect(() => {
    createModel();
  }, []);

  const createModel = () => {
    setX(tf.tensor2d(x1));
    setY(tf.tensor1d(x2));
    const model = tf.sequential();
    model.add(tf.layers.dense({ units: 64, activation: 'relu', inputDim: 5 }));
    model.add(tf.layers.dense({ units: 64, activation: 'relu' }));
    model.add(tf.layers.dense({ units: 1 }));

    const optimizer = tf.train.rmsprop(0.001);
    model.compile({ loss: 'meanSquaredError', optimizer: optimizer, metrics: ['mae', 'mse'] });
    setModel(model)
  };

  const trainModel = async () => {
    console.log("entrenando...")
    if (!model || !X || !Y) {
      console.log("Uno de los elementos es nulo");
      return;
    }
    try {
      const options = {
        epochs: 3000,
        validationSplit: 0.1,
        shuffle: true
      }
      await model.fit(X, Y, options).then(results => {
        console.log(results.history.loss)
      });

    } catch (error) {
      console.error('Error al entrenar y guardar el modelo:', error);
    }
    console.log("fin entrenamiento...")
  };

  const guardarmodelo = () => {
    model.save('localstorage://mymodel').then(
    );
    //model.save('downloads://my_model');
    console.log("modelo guardado")
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    let updatedValue = isNaN(parseFloat(value)) ? value : parseFloat(value);
    setPredict({ ...predict, [name]: updatedValue });
  };

  const handlePredict = async () => {
    //hacer prediccion predeterminada
    const inputData = tf.tensor([[predict.age, predict.weight, predict.height, predict.sex, predict.physicalActivity]]);
    const prediction = model.predict(inputData);
    setResultMessage(`La cantidad de calorías que deberías ingerir diariamente es: ${prediction.dataSync()[0].toFixed(2)}`);
  };

  const cargarModelo = async () => {
    const model = await tf.loadLayersModel('localstorage://mymodel');
    console.log("modelo cargado")
    setModel(model)
  };

  const handleSignOutClick = () => {
    localStorage.clear();
    navigate('/');
    logout();
  };

  const handleStore = () => {
    navigate('/store');
  };

  const handleRecipe = () => {
    navigate('/recipe');
  };


  const handleLanding = () => {
    navigate('/landing');
  };

  const handlePerfil = () => {
    navigate('/perfil');
  };

  const handleAI = () => {
    navigate('/AI');
  };




  return (

    <>
    <nav id="nav">
        <a id="logo">
          <svg version="1.0" xmlns="http://www.w3.org/2000/svg"
            width="80" height="60"
            viewBox="0 0 242 200"
            preserveAspectRatio="xMidYMid meet">
            <g transform="translate(0.000000,200.000000) scale(0.100000,-0.100000)"
              fill="#000000" stroke="none">
              <path d="M950 1559 c-204 -76 -249 -92 -468 -171 l-92 -33 2 -393 3 -393 70 -28 c39 -15 106 -41 150 -59 44 -17 154 -60 245 -95 250 -99 294 -114 312 -112 20 4 723 262 749 276 18 9 19 28 19 394 0 368 -1 385 -19 394 -11 6 -57 26 -103 45 -45 18 -144 59 -218 89 -74 31 -196 81 -270 111 -74 31 -142 56 -150 56 -8 -1 -112 -37 -230 -81z m445 -25 c247 -102 379 -156 455 -188 l55 -23 5 -199 c3 -109 3 -280 0 -379 l-5 -179 -370 -137 -370 -136 -65 25 c-131 50 -240 93 -460 179 l-225 88 -3 372 c-2 350 -1 373 16 382 10 5 137 53 282 107 146 54 310 114 365 135 55 21 102 38 105 38 2 1 99 -38 215 -85z" />
              <path d="M921 1333 c64 -86 96 -140 90 -146 -15 -15 -25 -4 -123 126 -107 144 -97 131 -103 126 -2 -3 38 -64 90 -136 52 -73 95 -137 95 -142 0 -30 -34 2 -124 115 -54 68 -101 122 -104 120 -2 -3 37 -59 87 -125 100 -132 111 -151 88 -151 -8 0 -61 57 -116 126 -56 70 -101 123 -101 119 0 -7 139 -217 197 -297 30 -42 39 -48 71 -48 47 0 53 -4 92 -68 32 -52 32 -53 14 -75 -11 -12 -67 -74 -125 -137 -140 -155 -176 -233 -129 -280 11 -11 32 -20 48 -20 61 0 124 66 232 246 28 46 55 86 59 89 5 2 32 -35 62 -83 108 -178 165 -241 225 -249 76 -10 101 64 51 150 -14 24 -78 100 -141 170 -64 69 -116 131 -116 137 0 6 16 35 35 65 33 53 36 55 79 55 l44 0 109 163 c120 178 126 187 120 187 -3 0 -51 -58 -107 -130 -93 -117 -120 -142 -120 -107 0 7 43 68 95 136 52 69 92 127 90 130 -3 2 -6 2 -8 0 -41 -57 -201 -249 -208 -249 -22 0 -5 36 59 123 100 136 115 158 109 163 -2 3 -48 -54 -102 -126 -53 -71 -101 -130 -105 -130 -27 0 -12 33 67 142 98 136 106 148 100 148 -3 0 -64 -71 -137 -157 l-132 -157 6 -51 c6 -50 5 -52 -35 -91 l-41 -39 -39 45 c-21 25 -37 50 -35 57 3 6 7 27 11 45 6 34 -4 47 -226 306 -69 81 -47 41 52 -95z" />
              <path d="M480 1020 c0 -19 7 -20 160 -20 153 0 160 1 160 20 0 19 -7 20 -160 20 -153 0 -160 -1 -160 -20z" />
              <path d="M1530 1020 c0 -19 7 -20 155 -20 148 0 155 1 155 20 0 19 -7 20 -155 20 -148 0 -155 -1 -155 -20z" />
              <path d="M440 960 c0 -19 6 -20 201 -20 186 0 200 1 197 18 -3 15 -22 17 -201 20 -192 2 -197 2 -197 -18z" />
              <path d="M1487 974 c-4 -4 -7 -13 -7 -21 0 -10 41 -13 206 -13 190 0 205 1 202 18 -3 15 -22 17 -199 20 -107 1 -198 -1 -202 -4z" />
              <path d="M482 893 c3 -16 19 -18 158 -18 139 0 155 2 158 18 3 16 -10 17 -158 17 -148 0 -161 -1 -158 -17z" />
              <path d="M1530 890 c0 -19 7 -20 155 -20 148 0 155 1 155 20 0 19 -7 20 -155 20 -148 0 -155 -1 -155 -20z" />
            </g>
          </svg></a>
        <div>
          <ul id="navbar">
            <li><a onClick={handleLanding}>HOME</a></li>
            <li><a onClick={handleStore}>STORE</a></li>
            <li><a onClick={handleRecipe}>RECIPES</a></li>
            <li><a onClick={handleAI}>TEST AI</a></li>
            <li class="dropdown">
              <a href="#">PROFILE</a>
              <div class="dropdown-content">
                <a onClick={handlePerfil}>EDIT PROFILE</a>
                <a onClick={handleSignOutClick}>LOGOUT</a>
              </div>
            </li>
          </ul>
        </div>
      </nav>

    <div id="container">
      <div id="button-container">
        <button onClick={trainModel}>Train model</button>
        <button onClick={guardarmodelo}>Save model</button>
        <button onClick={cargarModelo}>Load model</button>
      </div>
      <div id="input-container1">
        <input type="number" placeholder="Age" id="age" name="age" onChange={handleChange} />
        <input type="number" placeholder="Weight (in kg)" id="weight" name="weight" onChange={handleChange} />
        <input type="number" placeholder="Height (in cm)" id="height" name="height" onChange={handleChange} />
        <select id="sex" name="sex" value={predict.sex} onChange={handleChange}>
          <option value="0">Male</option>
          <option value="1">Female</option>
        </select>
        <select id="physical-activity" name="physicalActivity" value={predict.physicalActivity} onChange={handleChange}>
          <option value="1">Sedentary</option>
          <option value="2">Moderately active</option>
          <option value="3">Athletic</option>
        </select>
      </div>
      <button id="predict-button" onClick={handlePredict}>Predecir modelo</button>
      <br />
      <center><h1>{resultMessage}</h1></center>
    </div>

    </>

  );
}

export default AIPage;


